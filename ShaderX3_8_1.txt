这篇文章讨论一种渲染体容积光的技术，是一个对现有游戏使用技术的提升。这个技术基于面片的体渲染方法。这里我们会童工对Dobashi和Nishita技术的数个提升的方法，在ps_2_0着色器支持下可以实现。

场景中的容积光

一般来说，在实时3D图形中，我们使用简单雾模型和粒子系统去模拟光从漂浮在空中颗粒物中散射回来的效果。这些效果对给与我们对规模的感受和增强场景的真实感很重要，但我们可以在硬件上通过复杂的shader和高填充率做得更好。我们将在这章节实现的效果是发光颗粒物的可视化，或者"participating media"在我们的场景中。这些颗粒物密度可能不均匀并且需要有正确的场景阴影，如图8.1.1。
大多数游戏通过绘制容积光边界区域多边形来渲染容积光，这些多边形混合在场景中，当使用恰当的时候，能够给场景一种很好的空中发光颗粒物的感觉。这些多边形被一个随机纹理渲染、缓慢的UV动画来给出一种灰尘在空间中漂浮的感觉。
一些游戏会把金字塔型的光线通过更多的多边形来显示，当摄像机相对于容积光移动的时候这给予了一定的视差效果，因为体内的点被渲染了。渲染容积光的包围体时通常消耗都比较少，但一般没那么方便。这种幻觉在用户相对于容积光移动的时候会被破坏，特别是当容积光被camera的front plane剪裁的时候。
Mech01和James03研究了另外一类方法。这两篇文章讨论了通过增加和减去前后深度来计算特定体积的射线长度从而计算出漂浮物包围体的形状。这是很聪明的技术可以自然地整合在3D多边形场景中，但是他们不允许灯光颜色参数，不均匀的密度，或者复杂的阴影。
这节讨论的方法是基于科学可视化社区中使用的技术，特别是基于面片的体渲染。代替在世界空间和灯光空间中渲染特定的多边形来制作容积光，我们渲染相机空间中固定朝向的多边形以便沿着光线整合光量。
当场景其他部分都被渲染了，一系列垂直于视线方向的面片会被渲染，如图。这些面片通过add的方法渲染到framebuffer中以便积累场景中颗粒物通过每个像素光线摄像视点散射的光。
当你正常渲染的时候，你其实是计算每个给定像素散射到眼睛里面的光量，但你可以通过渲染正常的不透明多边形平面。在半透明体积数据如容积光的情况下，你应该沿着射线统计volume内所有散射的光。这是我们渲染一堆堆砌相机空间取样平面的原因，让你可以取样容积光体积的所有射线。
